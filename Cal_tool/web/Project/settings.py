"""
Django settings for Project project.

Generated by 'django-admin startproject' using Django 2.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development profile - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'nto*-9g$orplg$^&os&7e(!-u9%23deo#er$9rb+g3@k$^1jty'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'cal_tool.apps.CalToolConfig',
    'django_crontab'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

if 'DB_NAME' in os.environ:
    # Running the Docker image
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': os.environ['DB_NAME'],
            'USER': os.environ['DB_USER'],
            'PASSWORD': os.environ['DB_PASS'],
            'HOST': os.environ['DB_SERVICE'],
            'PORT': os.environ['DB_PORT']
        }
    }
else:
    # Building the Docker image
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://redis:6379/0",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}

SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"


# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
    'django.contrib.auth.hashers.BCryptPasswordHasher',
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'
# TIME_ZONE = "Europe/Brussels"
USE_I18N = True
USE_L10N = True
USE_TZ = True

LOGIN_URL = "login"

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/
STATIC_URL = '/static/'
STATIC_ROOT = "../web/Project/static/"
#STATICFILES_DIRS = [
#    os.path.join(BASE_DIR, "Project/static"),
#]

AUTH_USER_MODEL = 'cal_tool.Users'

# ------------------------------------------------------------------------------------------------
# Caltool specific settings
import json
import subprocess
from subprocess import Popen, call
import importlib.util
from django.core.management import execute_from_command_line
ICS_TMP_STORE = "/data/web/cal_tool/storage/tmp/"
ICS_SAVED_STORE = "/data/web/cal_tool/storage/saved/"
SETTINGS_STORE = "/data/web/cal_tool/settings/settings.json"

globals_set = False


def cron_add():
    dirname = os.path.dirname(__file__)
    filename = os.path.join(dirname, 'sh/cron_file')
    update_variables()

    short_term_cron = '*/{0} * * * * python3 /data/web/manage.py short_term_calendar_checkup\n'.format(SHORT_TERM_UPDATE_FREQUENCY)
    long_term_cron = '{0} {1} * * * python3 /data/web/manage.py full_calendar_checkup\n'.format(MINUTE, HOUR)
    with open("/data/web/output.log", "a") as output:
        with open(filename, "w") as cron_file:
            cron_file.write(long_term_cron)
            cron_file.write(short_term_cron)
        # output.write("Enabling new crontab...")
        subprocess.run('crontab {0}'.format("/data/web/Project/sh/cron_file"), shell=True, stdout=output, stderr=output)


def update_variables():
    with open(SETTINGS_STORE, 'r') as fp:
        data = json.load(fp)

    global FUZZY_STRING_MATCHING_WORD_TRESHOLD
    global FUZZY_STRING_MATCHING_STRING_TRESHOLD
    global HOUR
    global MINUTE
    global SHORT_TERM_UPDATE_FREQUENCY
    FUZZY_STRING_MATCHING_WORD_TRESHOLD = int(data["fuzzy_string_word_treshold"])
    FUZZY_STRING_MATCHING_STRING_TRESHOLD= int(data["fuzzy_string_string_treshold"])
    SHORT_TERM_UPDATE_FREQUENCY = data["short_term_update_frequency"]
    HOUR = data["long_term_update_hour"]
    MINUTE = data["long_term_update_minutes"]
    # cron_add()
    # globals()


def globals():
    print("Word treshold: {}".format(FUZZY_STRING_MATCHING_WORD_TRESHOLD))
    print("String treshold: {}".format(FUZZY_STRING_MATCHING_STRING_TRESHOLD))
    print("SHORT TERM UPDATE FREQUENCY: {}".format(SHORT_TERM_UPDATE_FREQUENCY))
    print("HOUR: {}".format(HOUR))
    print("MINUTE: {}".format(MINUTE))


# update_variables()
with open(SETTINGS_STORE, 'r') as fp:
    data = json.load(fp)

FUZZY_STRING_MATCHING_WORD_TRESHOLD = int(data["fuzzy_string_word_treshold"])
FUZZY_STRING_MATCHING_STRING_TRESHOLD = int(data["fuzzy_string_string_treshold"])
SHORT_TERM_UPDATE_FREQUENCY = data["short_term_update_frequency"]
HOUR = data["long_term_update_hour"]
MINUTE = data["long_term_update_minutes"]
